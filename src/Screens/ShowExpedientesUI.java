
package Screens;

import DataClasses.DataInteresado;
import DataClasses.DependenciasDisp;
import DataClasses.Expediente;
import DataManagers.UserManager;
import TDA.Simple.Node;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class ShowExpedientesUI extends javax.swing.JFrame {
    //FondoPanel fondo = new FondoPanel();

    /**
     * Creates new form ShowExpedientesUI
     */
    private UserManager administrador;
    
    public static ShowExpedientesUI instancia;

    public ShowExpedientesUI(UserManager administrador) {
        initComponents();
        setLocationRelativeTo(null);
        this.administrador = administrador;
        instancia = this;
        jFiltroDepend.removeAllItems(); // Limpia cualquier item por defecto
        jFiltroDepend.addItem("Todas");
        for (String dep : DependenciasDisp.Lista) {
            jFiltroDepend.addItem(dep);
       }
        initializeTable();
    }
    
    public javax.swing.JTable getUserTable() {
       return userTable;
    }
    
    public void refreshTable() {
    DefaultTableModel table = (DefaultTableModel) userTable.getModel();
    table.setRowCount(0); // Limpiar la tabla
    initializeTable();    // Volver a llenar la tabla
}
    
    private void initializeTable() {
        DefaultTableModel table = (DefaultTableModel) userTable.getModel();
        table.setRowCount(0);

        Object selected = jFiltroDepend.getSelectedItem();
        String filtro = (selected != null) ? selected.toString() : "Todas";
        TDA.Simple.ListaEnlazada<Expediente> listaFiltrada = new TDA.Simple.ListaEnlazada<>();

        TDA.Simple.NodoExpediente ptr = administrador.ListaExp.getFrente();

        while (ptr != null) {
            Expediente exp = ptr.getExpediente();
            
            if (exp.isFinalizado()) {
                ptr = ptr.getNext();
                continue;
                }
            
            if (filtro.equals("Todas") || exp.getDependenciaActual().equals(filtro)) {
                insertarPrioridad(listaFiltrada, exp);
            }
            ptr = ptr.getNext();
        }
        Node<Expediente> aux = listaFiltrada.getFrente();
        while (aux != null) {
            Expediente exp = aux.item();
            DataInteresado data = exp.getData();

            Object[] row = new Object[]{
                exp.getId(),
                exp.getPrioridad(),
                exp.getAsunto(),
                exp.getDocumentoReferencia(),
                exp.getFechaInicio(),
                data.getDni(),
                data.getNombres(),
                data.getTelefono(),
                data.getEmail(),
                data.getTipo(),
                exp.getDependenciaActual()
            };

            table.addRow(row);
            aux = aux.next();
        }
    }
    
    private void insertarPrioridad(TDA.Simple.ListaEnlazada<Expediente> lista, Expediente nuevo){
        TDA.Simple.ListaEnlazada<Expediente> nuevaLista = new TDA.Simple.ListaEnlazada<>();
        Node<Expediente> actual = lista.getFrente();
        
        boolean insertado = false;
        
        while(actual != null){
            Expediente exp = actual.item();
            if(!insertado && CompararPrio(nuevo.getPrioridad(), exp.getPrioridad()) < 0){
                nuevaLista.addLast(nuevo);
                insertado = true;
            }
            nuevaLista.addLast(exp);
            actual = actual.next();
        }
        
        if(!insertado){
            nuevaLista.addLast(nuevo);
        }
        
        lista.vaciar();
            Node<Expediente> ptr = nuevaLista.getFrente();
            while (ptr != null) {
                lista.addLast(ptr.item());
                ptr = ptr.next();
            }
    }
    
    private int CompararPrio(String a, String b){
        return prioridadValor(a) - prioridadValor(b);
    }
    
    private int prioridadValor(String prioridad){
        if(prioridad == null) 
            return 0;
        return switch (prioridad.toLowerCase()) {
            case "alta" -> 1;
            case "media" -> 2;
            case "baja" -> 3;
            default -> 4;
        };
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        goBack = new javax.swing.JButton();
        jMover = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jFiltroDepend = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jFinalizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "PRIORIDAD", "ASUNTO", "DOCUMENTO", "FECHA", "DNI", "NOMBRE", "TELEFONO", "EMAIL", "TIPO", "DEPENDENCIA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userTable);

        goBack.setBackground(new java.awt.Color(0, 0, 0));
        goBack.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        goBack.setForeground(new java.awt.Color(255, 255, 255));
        goBack.setText("Salir");
        goBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackActionPerformed(evt);
            }
        });

        jMover.setBackground(new java.awt.Color(255, 153, 51));
        jMover.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMover.setForeground(new java.awt.Color(255, 255, 255));
        jMover.setText("Mover");
        jMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoverActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 3, 24)); // NOI18N
        jLabel1.setText("EXPEDIENTES");

        jFiltroDepend.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jFiltroDepend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFiltroDependActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Filtrar por Dependencias");

        jFinalizar.setBackground(new java.awt.Color(255, 0, 0));
        jFinalizar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jFinalizar.setForeground(new java.awt.Color(255, 255, 255));
        jFinalizar.setText("Finalizar");
        jFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFinalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(goBack)
                                .addGap(18, 18, 18)
                                .addComponent(jMover)
                                .addGap(18, 18, 18)
                                .addComponent(jFinalizar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(462, 462, 462)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jFiltroDepend, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 462, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFiltroDepend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goBack, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jMover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jFinalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackActionPerformed
        // TODO add your handling code here:
        ScreenManager.goBack(this);
    }//GEN-LAST:event_goBackActionPerformed

    private void jMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoverActionPerformed
      
        int filaSeleccionada = userTable.getSelectedRow();
        
    if (filaSeleccionada == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Seleccione un expediente primero.");
        return;
    }

    int id = (int) userTable.getValueAt(filaSeleccionada, 0);

    MoverExpUI moverUI = new MoverExpUI(administrador, id, this);
    ScreenManager.openNewScreen(this, moverUI);
    }//GEN-LAST:event_jMoverActionPerformed

    private void jFiltroDependActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFiltroDependActionPerformed
        refreshTable();
    }//GEN-LAST:event_jFiltroDependActionPerformed

    private void jFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFinalizarActionPerformed
        int filaSeleccionada = userTable.getSelectedRow();

    if (filaSeleccionada == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Seleccione un expediente primero.");
        return;
    }

    String dependencia = userTable.getValueAt(filaSeleccionada, 10).toString(); // Columna "DEPENDENCIA"

    if (!dependencia.equals("Administrador")) {
        javax.swing.JOptionPane.showMessageDialog(this, "Solo se puede finalizar expedientes en la dependencia 'Administrador'.");
        return;
    }

    int confirmar = javax.swing.JOptionPane.showConfirmDialog(this, "¿Está seguro de finalizar este expediente?", "Confirmar", javax.swing.JOptionPane.YES_NO_OPTION);

    if (confirmar == javax.swing.JOptionPane.YES_OPTION) {
        int id = (int) userTable.getValueAt(filaSeleccionada, 0);
        administrador.finalizarExpediente(id);
        javax.swing.JOptionPane.showMessageDialog(this, "Expediente finalizado correctamente.");
        refreshTable();
        }
    }//GEN-LAST:event_jFinalizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goBack;
    private javax.swing.JComboBox<String> jFiltroDepend;
    private javax.swing.JButton jFinalizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jMover;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
    /*
    class FondoPanel extends JPanel{
        private Image imagen;
        
        @Override
        public void paint(Graphics g){
            imagen = new ImageIcon(getClass().getResource("/Iconos/MaderaPared.jpg")).getImage();
            
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            
            super.paint(g);
        }
    }
    */
}
